// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "binance/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// OrderRepo is an autogenerated mock type for the OrderRepo type
type OrderRepo struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: id
func (_m *OrderRepo) GetByID(id int) (*models.Order, error) {
	ret := _m.Called(id)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(int) *models.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySessionID provides a mock function with given fields: sessionID
func (_m *OrderRepo) GetBySessionID(sessionID string) ([]models.Order, error) {
	ret := _m.Called(sessionID)

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func(string) []models.Order); ok {
		r0 = rf(sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirst provides a mock function with given fields: symbol
func (_m *OrderRepo) GetFirst(symbol string) (*models.Order, error) {
	ret := _m.Called(symbol)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(string) *models.Order); ok {
		r0 = rf(symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLast provides a mock function with given fields: symbol
func (_m *OrderRepo) GetLast(symbol string) (*models.Order, error) {
	ret := _m.Called(symbol)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(string) *models.Order); ok {
		r0 = rf(symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastWithInterval provides a mock function with given fields: symbol, sTime, eTime
func (_m *OrderRepo) GetLastWithInterval(symbol string, sTime time.Time, eTime time.Time) ([]models.Order, error) {
	ret := _m.Called(symbol, sTime, eTime)

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) []models.Order); ok {
		r0 = rf(symbol, sTime, eTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(symbol, sTime, eTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetActualPrice provides a mock function with given fields: id, price
func (_m *OrderRepo) SetActualPrice(id int, price float64) error {
	ret := _m.Called(id, price)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, float64) error); ok {
		r0 = rf(id, price)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatus provides a mock function with given fields: id, status
func (_m *OrderRepo) SetStatus(id int, status string) error {
	ret := _m.Called(id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTry provides a mock function with given fields: id, try
func (_m *OrderRepo) SetTry(id int, try int) error {
	ret := _m.Called(id, try)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, try)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: m
func (_m *OrderRepo) Store(m *models.Order) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Order) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderRepo creates a new instance of OrderRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderRepo(t mockConstructorTestingTNewOrderRepo) *OrderRepo {
	mock := &OrderRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
