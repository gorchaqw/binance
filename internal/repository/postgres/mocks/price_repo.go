// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "binance/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PriceRepo is an autogenerated mock type for the PriceRepo type
type PriceRepo struct {
	mock.Mock
}

// GetByCreatedByInterval provides a mock function with given fields: symbol, sTime, eTime
func (_m *PriceRepo) GetByCreatedByInterval(symbol string, sTime time.Time, eTime time.Time) ([]models.Price, error) {
	ret := _m.Called(symbol, sTime, eTime)

	var r0 []models.Price
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) []models.Price); ok {
		r0 = rf(symbol, sTime, eTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Price)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(symbol, sTime, eTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: symbol, id
func (_m *PriceRepo) GetByID(symbol string, id uint) (*models.Price, error) {
	ret := _m.Called(symbol, id)

	var r0 *models.Price
	if rf, ok := ret.Get(0).(func(string, uint) *models.Price); ok {
		r0 = rf(symbol, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Price)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(symbol, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLast provides a mock function with given fields: symbol, sTime, eTime
func (_m *PriceRepo) GetLast(symbol string, sTime time.Time, eTime time.Time) (*models.Price, error) {
	ret := _m.Called(symbol, sTime, eTime)

	var r0 *models.Price
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) *models.Price); ok {
		r0 = rf(symbol, sTime, eTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Price)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(symbol, sTime, eTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxMinByCreatedByInterval provides a mock function with given fields: symbol, sTime, eTime
func (_m *PriceRepo) GetMaxMinByCreatedByInterval(symbol string, sTime time.Time, eTime time.Time) (float64, float64, float64, float64, error) {
	ret := _m.Called(symbol, sTime, eTime)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) float64); ok {
		r0 = rf(symbol, sTime, eTime)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 float64
	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) float64); ok {
		r1 = rf(symbol, sTime, eTime)
	} else {
		r1 = ret.Get(1).(float64)
	}

	var r2 float64
	if rf, ok := ret.Get(2).(func(string, time.Time, time.Time) float64); ok {
		r2 = rf(symbol, sTime, eTime)
	} else {
		r2 = ret.Get(2).(float64)
	}

	var r3 float64
	if rf, ok := ret.Get(3).(func(string, time.Time, time.Time) float64); ok {
		r3 = rf(symbol, sTime, eTime)
	} else {
		r3 = ret.Get(3).(float64)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(string, time.Time, time.Time) error); ok {
		r4 = rf(symbol, sTime, eTime)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// Store provides a mock function with given fields: m
func (_m *PriceRepo) Store(m *models.Price) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Price) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPriceRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewPriceRepo creates a new instance of PriceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPriceRepo(t mockConstructorTestingTNewPriceRepo) *PriceRepo {
	mock := &PriceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
