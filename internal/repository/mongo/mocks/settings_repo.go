// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	structs "binance/internal/repository/mongo/structs"
)

// SettingsRepo is an autogenerated mock type for the SettingsRepo type
type SettingsRepo struct {
	mock.Mock
}

// Load provides a mock function with given fields: symbol
func (_m *SettingsRepo) Load(symbol string) (*structs.Settings, error) {
	ret := _m.Called(symbol)

	var r0 *structs.Settings
	if rf, ok := ret.Get(0).(func(string) *structs.Settings); ok {
		r0 = rf(symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structs.Settings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReLoad provides a mock function with given fields: settings
func (_m *SettingsRepo) ReLoad(settings *structs.Settings) error {
	ret := _m.Called(settings)

	var r0 error
	if rf, ok := ret.Get(0).(func(*structs.Settings) error); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDefault provides a mock function with given fields:
func (_m *SettingsRepo) SetDefault() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: id, status
func (_m *SettingsRepo) UpdateStatus(id primitive.ObjectID, status structs.SymbolStatus) error {
	ret := _m.Called(id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, structs.SymbolStatus) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSettingsRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewSettingsRepo creates a new instance of SettingsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSettingsRepo(t mockConstructorTestingTNewSettingsRepo) *SettingsRepo {
	mock := &SettingsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
